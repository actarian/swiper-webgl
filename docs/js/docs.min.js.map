{"version":3,"sources":["docs/js/docs.js"],"names":["Element","prototype","hasClass","name","RegExp","test","this","className","addClass","removeClass","split","join","replace","window","Utils","getResource","url","callback","request","XMLHttpRequest","open","addEventListener","responseText","send","WebglSwiper","containerNode","querySelector","glsl","swiperContainerNode","pictureNodes","querySelectorAll","previousX","previousDir","uniforms","hover","pictureData","pictures","Array","slice","call","map","node","index","src","getAttribute","img","Image","onload","updateTextures","swiper","Swiper","direction","navigation","nextEl","prevEl","pagination","el","type","clickable","speed","loop","preloadImages","initialSlide","mousewheel","on","init","shader","console","log","canvasNode","document","createElement","setAttribute","insertBefore","firstChild","resize","ri","GlslCanvas","premultipliedAlpha","preserveDrawingBuffer","backgroundColor","w","offsetWidth","h","offsetHeight","style","width","height","onResize","clearTimeout","setTimeout","data","load","getGlslCanvas","loadTexture","filtering","repeat","getCurrentIndex","x","getTranslate","diff","Math","abs","from","to","dir","length","setUniforms","u_mix","onOver","onOut","slideNextTransitionEnd","onTransitionEnd","slidePrevTransitionEnd","TweenLite","ease","Power2","easeOut","overwrite","onUpdate","setUniform","undefined","realIndex","activeIndex","forward","index1","index2","picture1","picture2","uniformTexture","webglSwiper","WebglHover","webglHover"],"mappings":"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","file":"docs.min.js","sourcesContent":["/* global window, document, console, GlslCanvas, Swiper, TweenLite */\n\n(function () {\n    'use strict';\n\n    Element.prototype.hasClass = function (name) {\n        return new RegExp(\"(?:^|\\\\s+)\" + name + \"(?:\\\\s+|$)\").test(this.className);\n    };\n\n    Element.prototype.addClass = function (name) {\n        if (!this.hasClass(name)) {\n            this.className = this.className ? (this.className + ' ' + name) : name;\n        }\n    };\n\n    Element.prototype.removeClass = function (name) {\n        if (this.hasClass(name)) {\n            this.className = this.className.split(name).join('').replace(/\\s\\s+/g, ' '); // .replace(new RegExp('(?:^|\\\\s+)' + name + '(?:\\\\s+|$)', 'g'), '');\n        }\n    };\n\n}());\n/* global window, document, console, GlslCanvas, Swiper, TweenLite */\n\n(function () {\n    'use strict';\n\n    window.Utils = {\n        getResource: getResource,\n    };\n\n    function getResource(url, callback) {\n        var request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.addEventListener('load', function () {\n            callback(request.responseText);\n        });\n        request.send();\n    }\n\n}());\n/* global window, document, console, GlslCanvas, Swiper, TweenLite */\n\n(function () {\n    'use strict';\n\n    [].slice.call(document.querySelectorAll('[webgl-swiper]')).map(function (containerNode) {\n        containerNode.webglSwiper = new WebglSwiper(containerNode);\n    });\n\n    function WebglSwiper(containerNode) {\n        var infoNode = containerNode.querySelector('.info > span');\n        var swiperContainerNode = containerNode.querySelector('.swiper-container');\n        var pictureNodes = swiperContainerNode.querySelectorAll('img');\n        var previousX = 0,\n            previousIndex = null,\n            previousDir = null,\n            previousPow = null;\n        // per rimuovere il flickr serve un preload\n        var glsl;\n        var uniforms = {\n            hover: 0.0,\n        };\n        var pictureData = [];\n        var pictures = Array.prototype.slice.call(pictureNodes, 0).map(function (node, index) {\n            var src = node.getAttribute('src');\n            var img = new Image();\n            img.onload = function () {\n                // console.log('loaded', src);\n                pictureData[index] = img;\n                if (glsl) {\n                    updateTextures(glsl.index, glsl.index);\n                }\n            };\n            // img.crossOrigin = 'Anonymous';\n            img.src = src;\n            return src;\n        });\n        var swiper = new Swiper(swiperContainerNode, {\n            direction: 'horizontal',\n            navigation: {\n                nextEl: '.swiper-button-next',\n                prevEl: '.swiper-button-prev'\n            },\n            pagination: {\n                el: '.swiper-pagination',\n                type: 'bullets',\n                clickable: true,\n            },\n            speed: 750,\n            loop: true,\n            preloadImages: true,\n            initialSlide: 0,\n            mousewheel: false,\n            on: {\n                init: onInit,\n                slideNextTransitionEnd: function () {\n                    swiper = this;\n                    onTransitionEnd(swiper, true);\n                },\n                slidePrevTransitionEnd: function () {\n                    swiper = this;\n                    onTransitionEnd(swiper, false);\n                },\n                /*\n                progress: function () {\n                    swiper = this;\n                    // console.log('progress', swiper.progress);\n                }\n                */\n            }\n        });\n        return swiper;\n\n        function onInit() {\n            swiper = this;\n            swiperContainerNode.addClass('active');\n            var shader = containerNode.getAttribute('webgl-swiper');\n            console.log(shader);\n            glsl = getGlslCanvas(shader);\n            glsl.loadTexture('u_tex0', 'img/textures/tile-02.jpg', {\n                filtering: 'mipmap',\n                repeat: true,\n            });\n            glsl.index = getCurrentIndex(swiper);\n            glsl.on('render', function () {\n                var x = getPow(swiper);\n                // x = Math.min(0.99, x);\n                var diff = x - previousX;\n                if (previousX !== x && Math.abs(diff) < 0.9) {\n                    previousX = x;\n                    var dir = diff > 0;\n                    // infoNode.innerText = x.toFixed(2) + ' ' + swiper.realIndex + ' ' + dir;\n                    if (previousDir !== dir) {\n                        previousDir = dir;\n                        var from, to;\n                        if (dir) {\n                            from = glsl.index;\n                            to = (glsl.index + 1) % pictures.length;\n                            updateTextures(from, to);\n                        } else {\n                            from = glsl.index;\n                            to = (glsl.index - 1) % pictures.length;\n                            to = to < 0 ? to + pictures.length : to;\n                            updateTextures(to, from);\n                        }\n                    }\n                    glsl.setUniforms({\n                        u_mix: x\n                    });\n                }\n                // glsl.forceRender = true;\n            });\n            containerNode.addEventListener('mouseover', onOver);\n            containerNode.addEventListener('mouseout', onOut);\n        }\n\n        function onOver() {\n            TweenLite.to(uniforms, 0.55, {\n                hover: 1.0,\n                ease: Power2.easeOut,\n                overwrite: 'all',\n                onUpdate: function () {\n                    glsl.setUniform('u_hover', uniforms.hover);\n                },\n            });\n        }\n\n        function onOut() {\n            TweenLite.to(uniforms, 0.55, {\n                hover: 0.0,\n                ease: Power2.easeOut,\n                overwrite: 'all',\n                onUpdate: function () {\n                    glsl.setUniform('u_hover', uniforms.hover);\n                },\n            });\n        }\n\n        function getGlslCanvas(shader) {\n            var canvasNode = document.createElement('canvas');\n            canvasNode.setAttribute('class', 'canvas');\n            containerNode.insertBefore(canvasNode, containerNode.firstChild);\n\n            resize(true);\n\n            var glsl = new GlslCanvas(canvasNode, {\n                premultipliedAlpha: false,\n                preserveDrawingBuffer: true,\n                backgroundColor: 'rgba(1,1,1,1)',\n            });\n\n            Utils.getResource(shader, function (data) {\n                glsl.load(data);\n            });\n\n            function resize(init) {\n                var w = containerNode.offsetWidth;\n                var h = containerNode.offsetHeight;\n                canvasNode.style.width = w + 'px';\n                canvasNode.style.height = h + 'px';\n                canvasNode.width = w;\n                canvasNode.height = h;\n            }\n            var ri;\n\n            function onResize() {\n                if (ri) {\n                    clearTimeout(ri);\n                }\n                ri = setTimeout(resize, 50);\n            }\n            onResize();\n            window.addEventListener('resize', onResize, true);\n            /*\n            for (var t in o.textures) {\n                glsl.uniformTexture('u_texture_' + t, o.textures[t], {\n                    filtering: 'mipmap',\n                    repeat: true,\n                });\n            }\n            gui.load(o.uniforms);\n            glsl.setUniforms(gui.uniforms());\n            */\n            return glsl;\n        }\n\n        function getCurrentIndex(swiper) {\n            return swiper.realIndex !== undefined ? swiper.realIndex : swiper.activeIndex;\n        }\n\n        function onTransitionEnd(swiper, forward) {\n            if (glsl) {\n                glsl.index = getCurrentIndex(swiper);\n                // console.log('onTransitionEnd', glsl.index);\n                updateTextures(glsl.index, glsl.index);\n            }\n        }\n\n        function updateTextures(index1, index2) {\n            index1 = index1 || 0;\n            // console.log('updateTextures', index1, index2);\n            if (glsl) {\n                var picture1 = pictureData[index1 % pictures.length];\n                var picture2 = pictureData[index2 % pictures.length];\n                glsl.uniformTexture('u_tex1', picture1, {\n                    filtering: 'mipmap',\n                    repeat: true,\n                });\n                glsl.uniformTexture('u_tex2', picture2, {\n                    filtering: 'mipmap',\n                    repeat: true,\n                });\n                // console.log('glsl.updateTextures', 'from', from, 'to', to);\n            }\n        }\n\n        function getX(swiper) {\n            return (swiper.getTranslate() / containerNode.offsetWidth * -1);\n        }\n\n        function getPow(swiper) {\n            return getX(swiper) % 1.0;\n        }\n\n    }\n\n}());\n/* global window, document, console, GlslCanvas, TweenLite */\n\n(function () {\n    'use strict';\n\n    [].slice.call(document.querySelectorAll('[webgl-hover]')).map(function (containerNode) {\n        containerNode.webglHover = new WebglHover(containerNode);\n    });\n\n    function WebglHover(containerNode) {\n        var uniforms = {\n            hover: 0.0,\n        };\n        var canvasNode = document.createElement('canvas');\n        canvasNode.setAttribute('class', 'canvas');\n        containerNode.insertBefore(canvasNode, containerNode.firstChild);\n\n        resize(true);\n        var glsl = new GlslCanvas(canvasNode, {\n            premultipliedAlpha: false,\n            preserveDrawingBuffer: true,\n            backgroundColor: 'rgba(1,1,1,1)',\n        });\n        var pictureNode = containerNode.querySelector('img');\n        var src = pictureNode.getAttribute('src');\n        console.log(src);\n        var img = new Image();\n        img.onload = function () {\n            glsl.uniformTexture('u_tex1', img, {\n                filtering: 'mipmap',\n                repeat: true,\n            });\n        };\n        img.src = src;\n\n        var shader = containerNode.getAttribute('webgl-hover');\n        Utils.getResource(shader, function (data) {\n            glsl.load(data);\n        });\n\n        glsl.loadTexture('u_tex0', 'img/textures/tile-02.jpg', {\n            filtering: 'mipmap',\n            repeat: true,\n        });\n        /*\n        glsl.on('render', function () {\n            glsl.forceRender = true;\n        });\n        */\n        var ri;\n        onResize();\n        window.addEventListener('resize', onResize, true);\n        containerNode.addEventListener('mouseover', onOver);\n        containerNode.addEventListener('mouseout', onOut);\n\n        function onResize() {\n            if (ri) {\n                clearTimeout(ri);\n            }\n            ri = setTimeout(resize, 50);\n        }\n\n        function resize(init) {\n            var w = containerNode.offsetWidth;\n            var h = containerNode.offsetHeight;\n            canvasNode.style.width = w + 'px';\n            canvasNode.style.height = h + 'px';\n            canvasNode.width = w;\n            canvasNode.height = h;\n        }\n\n        function onOver() {\n            TweenLite.to(uniforms, 0.55, {\n                hover: 1.0,\n                ease: Power2.easeOut,\n                overwrite: 'all',\n                onUpdate: function () {\n                    glsl.setUniform('u_hover', uniforms.hover);\n                },\n            });\n        }\n\n        function onOut() {\n            TweenLite.to(uniforms, 0.55, {\n                hover: 0.0,\n                ease: Power2.easeOut,\n                overwrite: 'all',\n                onUpdate: function () {\n                    glsl.setUniform('u_hover', uniforms.hover);\n                },\n            });\n        }\n\n    }\n\n}());\n/* global window, document, console, GlslCanvas, Swiper, TweenLite */\n\n(function () {\n    'use strict';\n\n}());"]}