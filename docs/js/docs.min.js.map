{"version":3,"sources":["docs/js/docs.js"],"names":["Element","prototype","hasClass","name","RegExp","test","this","className","addClass","removeClass","split","join","replace","glsl","containerNode","document","querySelector","swiperContainerNode","pictureNodes","querySelectorAll","uniforms","hover","pictureData","pictures","Array","slice","call","map","node","index","src","getAttribute","img","Image","onload","updateTextures","swiper","Swiper","direction","navigation","nextEl","prevEl","pagination","el","type","clickable","speed","loop","preloadImages","initialSlide","mousewheel","on","init","canvasNode","resize","ri","GlslCanvas","premultipliedAlpha","preserveDrawingBuffer","backgroundColor","w","offsetWidth","h","offsetHeight","style","width","height","onResize","clearTimeout","setTimeout","getCurrentIndex","x","getTranslate","diff","previousX","Math","abs","from","to","dir","previousDir","length","setUniforms","u_mix","forceRender","url","callback","data","load","request","XMLHttpRequest","open","addEventListener","responseText","send","window","onresize","event","getGlslCanvas","loadTexture","filtering","repeat","onOver","onOut","slideNextTransitionEnd","onTransitionEnd","slidePrevTransitionEnd","TweenLite","ease","Elastic","easeOut","overwrite","onUpdate","setUniform","undefined","realIndex","activeIndex","forward","index1","index2","picture1","picture2","uniformTexture","addSwiper"],"mappings":"CAEC,WACG,aAEAA,QAAQC,UAAUC,SAAW,SAAUC,GACnC,OAAO,IAAIC,OAAO,aAAeD,EAAO,cAAcE,KAAKC,KAAKC,YAGpEP,QAAQC,UAAUO,SAAW,SAAUL,GAC9BG,KAAKJ,SAASC,KACfG,KAAKC,UAAYD,KAAKC,UAAaD,KAAKC,UAAY,IAAMJ,EAAQA,IAI1EH,QAAQC,UAAUQ,YAAc,SAAUN,GAClCG,KAAKJ,SAASC,KACdG,KAAKC,UAAYD,KAAKC,UAAUG,MAAMP,GAAMQ,KAAK,IAAIC,QAAQ,SAAU,OAM/E,WACI,IAIIC,EAJAC,EAAgBC,SAASC,cAAc,YAEvCC,GADWH,EAAcE,cAAc,gBACjBF,EAAcE,cAAc,sBAClDE,EAAeD,EAAoBE,iBAAiB,OAEpDC,EAAW,CACXC,MAAO,GAEPC,EAAc,GACdC,EAAWC,MAAMvB,UAAUwB,MAAMC,KAAKR,EAAc,GAAGS,IAAI,SAAUC,EAAMC,GAC3E,IAAIC,EAAMF,EAAKG,aAAa,OACxBC,EAAM,IAAIC,MAUd,OATAD,EAAIE,OAAS,WAETZ,EAAYO,GAASG,EACjBnB,GACAsB,EAAetB,EAAKgB,MAAOhB,EAAKgB,QAIxCG,EAAIF,IAAMA,IAGVM,EAAS,IAAIC,OAAOpB,EAAqB,CACzCqB,UAAW,aACXC,WAAY,CACRC,OAAQ,sBACRC,OAAQ,uBAEZC,WAAY,CACRC,GAAI,qBACJC,KAAM,UACNC,WAAW,GAEfC,MAAO,IACPC,MAAM,EACNC,eAAe,EACfC,aAAc,EACdC,YAAY,EACZC,GAAI,CACAC,KAAM,WACFhB,EAAS9B,KACTW,EAAoBT,SAAS,WAC7BK,EAsDZ,SAAuBuB,GACnB,IAAIiB,EAAatC,SAASC,cAAc,WACxCsC,GAAO,GACP,IA+CIC,EA/CA1C,EAAO,IAAI2C,WAAWH,EAAY,CAClCI,oBAAoB,EACpBC,uBAAuB,EACvBC,gBAAiB,kBAoCrB,SAASL,EAAOF,GACZ,IAAIQ,EAAI9C,EAAc+C,YAClBC,EAAIhD,EAAciD,aACtBV,EAAWW,MAAMC,MAAQL,EAAI,KAC7BP,EAAWW,MAAME,OAASJ,EAAI,KAC9BT,EAAWY,MAAQL,EACnBP,EAAWa,OAASJ,EAIxB,SAASK,IACDZ,GACAa,aAAab,GAEjBA,EAAKc,WAAWf,EAAQ,IAgB5B,OAhEAzC,EAAKgB,MAAQyC,EAAgBlC,GAC7BvB,EAAKsC,GAAG,SAAU,WACd,IAAIoB,EAAWnC,EAkHJoC,eAAiB1D,EAAc+C,aAAe,EAIvC,EApHdY,EAAOF,EAAIG,EACf,GAAIA,IAAcH,GAAKI,KAAKC,IAAIH,GAAQ,GAAK,CACzCC,EAAYH,EACZ,IAIQM,EAAMC,EAJVC,EAAa,EAAPN,EAENO,IAAgBD,KAChBC,EAAcD,GAKV5C,EAFA0C,EAAOhE,EAAKgB,MACZiD,GAAMjE,EAAKgB,MAAQ,GAAKN,EAAS0D,SAGjCJ,EAAOhE,EAAKgB,MAGZM,EADA2C,GADAA,GAAMjE,EAAKgB,MAAQ,GAAKN,EAAS0D,QACvB,EAAIH,EAAKvD,EAAS0D,OAASH,EAClBD,KAG3BhE,EAAKqE,YAAY,CACbC,MAAOZ,IAGf1D,EAAKuE,aAAc,IAkGVC,EA/FD,qBA+FMC,EA/FgB,SAAUC,GACxC1E,EAAK2E,KAAKD,IA+FdE,EAAU,IAAIC,eAClBD,EAAQE,KAAK,MAAON,GAAK,GACzBI,EAAQG,iBAAiB,OAAQ,WAC7BN,EAASG,EAAQI,gBAErBJ,EAAQK,OAjFJC,OAAOC,SAAW,SAAUC,GACxB9B,KAEJA,IAWOtD,EA6Df,IAAqBwE,EAAKC,EAClBG,EA5LeS,CAAc9D,IAChB+D,YAAY,SAAU,4FAA6F,CACpHC,UAAW,SACXC,QAAQ,IAEZvF,EAAc8E,iBAAiB,YAAaU,GAC5CxF,EAAc8E,iBAAiB,WAAYW,IAE/CC,uBAAwB,WAEpBC,EADArE,EAAS9B,MACe,IAE5BoG,uBAAwB,WAEpBD,EADArE,EAAS9B,MACe,OAWpC,SAASgG,IACLK,UAAU7B,GAAG1D,EAAU,EAAK,CACxBC,MAAO,EACPuF,KAAMC,QAAQC,QACdC,UAAW,MACXC,SAAU,WACNnG,EAAKoG,WAAW,UAAW7F,EAASC,UAKhD,SAASkF,IACLI,UAAU7B,GAAG1D,EAAU,EAAK,CACxBC,MAAO,EACPuF,KAAMC,QAAQC,QACdC,UAAW,MACXC,SAAU,WACNnG,EAAKoG,WAAW,UAAW7F,EAASC,UAKhD,IAAIqD,EAAY,EAEZM,EAAc,KAgFlB,SAASV,EAAgBlC,GACrB,YAA4B8E,IAArB9E,EAAO+E,UAA0B/E,EAAO+E,UAAY/E,EAAOgF,YAGtE,SAASX,EAAgBrE,EAAQiF,GACzBxG,IACAA,EAAKgB,MAAQyC,EAAgBlC,GAE7BD,EAAetB,EAAKgB,MAAOhB,EAAKgB,QAIxC,SAASM,EAAemF,EAAQC,GAG5B,GAFAD,EAASA,GAAU,EAEfzG,EAAM,CACN,IAAI2G,EAAWlG,EAAYgG,EAAS/F,EAAS0D,QACzCwC,EAAWnG,EAAYiG,EAAShG,EAAS0D,QAC7CpE,EAAK6G,eAAe,SAAUF,EAAU,CACpCpB,UAAW,SACXC,QAAQ,IAEZxF,EAAK6G,eAAe,SAAUD,EAAU,CACpCrB,UAAW,SACXC,QAAQ,MAvMxBsB,GAnBJ","file":"docs.min.js","sourcesContent":["/* global window, document, console, GlslCanvas, Swiper, TweenLite */\n\n(function () {\n    'use strict';\n\n    Element.prototype.hasClass = function (name) {\n        return new RegExp(\"(?:^|\\\\s+)\" + name + \"(?:\\\\s+|$)\").test(this.className);\n    };\n\n    Element.prototype.addClass = function (name) {\n        if (!this.hasClass(name)) {\n            this.className = this.className ? (this.className + ' ' + name) : name;\n        }\n    };\n\n    Element.prototype.removeClass = function (name) {\n        if (this.hasClass(name)) {\n            this.className = this.className.split(name).join('').replace(/\\s\\s+/g, ' '); // .replace(new RegExp('(?:^|\\\\s+)' + name + '(?:\\\\s+|$)', 'g'), '');\n        }\n    };\n\n    addSwiper();\n\n    function addSwiper() {\n        var containerNode = document.querySelector('.section');\n        var infoNode = containerNode.querySelector('.info > span');\n        var swiperContainerNode = containerNode.querySelector('.swiper-container');\n        var pictureNodes = swiperContainerNode.querySelectorAll('img');\n        var glsl;\n        var uniforms = {\n            hover: 0.0,\n        };\n        var pictureData = [];\n        var pictures = Array.prototype.slice.call(pictureNodes, 0).map(function (node, index) {\n            var src = node.getAttribute('src');\n            var img = new Image();\n            img.onload = function () {\n                // console.log('loaded', src);\n                pictureData[index] = img;\n                if (glsl) {\n                    updateTextures(glsl.index, glsl.index);\n                }\n            };\n            // img.crossOrigin = 'Anonymous';\n            img.src = src;\n            return src;\n        });\n        var swiper = new Swiper(swiperContainerNode, {\n            direction: 'horizontal',\n            navigation: {\n                nextEl: '.swiper-button-next',\n                prevEl: '.swiper-button-prev'\n            },\n            pagination: {\n                el: '.swiper-pagination',\n                type: 'bullets',\n                clickable: true,\n            },\n            speed: 750,\n            loop: true,\n            preloadImages: true,\n            initialSlide: 0,\n            mousewheel: true,\n            on: {\n                init: function () {\n                    swiper = this;\n                    swiperContainerNode.addClass('active');\n                    glsl = getGlslCanvas(swiper);\n                    glsl.loadTexture('u_tex0', 'https://raw.githubusercontent.com/actarian/swiper-webgl/master/docs/img/masks/mask-01.jpg', {\n                        filtering: 'mipmap',\n                        repeat: true,\n                    });\n                    containerNode.addEventListener('mouseover', onOver);\n                    containerNode.addEventListener('mouseout', onOut);\n                },\n                slideNextTransitionEnd: function () {\n                    swiper = this;\n                    onTransitionEnd(swiper, true);\n                },\n                slidePrevTransitionEnd: function () {\n                    swiper = this;\n                    onTransitionEnd(swiper, false);\n                },\n                /*\n                progress: function () {\n                    swiper = this;\n                    // console.log('progress', swiper.progress);\n                }\n                */\n            }\n        });\n\n        function onOver() {\n            TweenLite.to(uniforms, 2.0, {\n                hover: 1.0,\n                ease: Elastic.easeOut,\n                overwrite: 'all',\n                onUpdate: function () {\n                    glsl.setUniform('u_hover', uniforms.hover);\n                },\n            });\n        }\n\n        function onOut() {\n            TweenLite.to(uniforms, 2.0, {\n                hover: 0.0,\n                ease: Elastic.easeOut,\n                overwrite: 'all',\n                onUpdate: function () {\n                    glsl.setUniform('u_hover', uniforms.hover);\n                },\n            });\n        }\n\n        var previousX = 0,\n            previousIndex = null,\n            previousDir = null,\n            previousPow = null;\n\n        // per rimuovere il flickr serve un preload\n\n        function getGlslCanvas(swiper) {\n            var canvasNode = document.querySelector('.canvas');\n            resize(true);\n            var glsl = new GlslCanvas(canvasNode, {\n                premultipliedAlpha: false,\n                preserveDrawingBuffer: true,\n                backgroundColor: 'rgba(1,1,1,1)',\n            });\n            glsl.index = getCurrentIndex(swiper);\n            glsl.on('render', function () {\n                var x = getPow(swiper);\n                // x = Math.min(0.99, x);\n                var diff = x - previousX;\n                if (previousX !== x && Math.abs(diff) < 0.9) {\n                    previousX = x;\n                    var dir = diff > 0;\n                    // infoNode.innerText = x.toFixed(2) + ' ' + swiper.realIndex + ' ' + dir;\n                    if (previousDir !== dir) {\n                        previousDir = dir;\n                        var from, to;\n                        if (dir) {\n                            from = glsl.index;\n                            to = (glsl.index + 1) % pictures.length;\n                            updateTextures(from, to);\n                        } else {\n                            from = glsl.index;\n                            to = (glsl.index - 1) % pictures.length;\n                            to = to < 0 ? to + pictures.length : to;\n                            updateTextures(to, from);\n                        }\n                    }\n                    glsl.setUniforms({\n                        u_mix: x\n                    });\n                }\n                glsl.forceRender = true;\n            });\n\n            getResource(\"shaders/tween.glsl\", function (data) {\n                glsl.load(data);\n            });\n\n            function resize(init) {\n                var w = containerNode.offsetWidth;\n                var h = containerNode.offsetHeight;\n                canvasNode.style.width = w + 'px';\n                canvasNode.style.height = h + 'px';\n                canvasNode.width = w;\n                canvasNode.height = h;\n            }\n            var ri;\n\n            function onResize() {\n                if (ri) {\n                    clearTimeout(ri);\n                }\n                ri = setTimeout(resize, 50);\n            }\n            window.onresize = function (event) {\n                onResize();\n            };\n            onResize();\n            /*\n            for (var t in o.textures) {\n                glsl.uniformTexture('u_texture_' + t, o.textures[t], {\n                    filtering: 'mipmap',\n                    repeat: true,\n                });\n            }\n            gui.load(o.uniforms);\n            glsl.setUniforms(gui.uniforms());\n            */\n            return glsl;\n        }\n\n        function getCurrentIndex(swiper) {\n            return swiper.realIndex !== undefined ? swiper.realIndex : swiper.activeIndex;\n        }\n\n        function onTransitionEnd(swiper, forward) {\n            if (glsl) {\n                glsl.index = getCurrentIndex(swiper);\n                // console.log('onTransitionEnd', glsl.index);\n                updateTextures(glsl.index, glsl.index);\n            }\n        }\n\n        function updateTextures(index1, index2) {\n            index1 = index1 || 0;\n            // console.log('updateTextures', index1, index2);\n            if (glsl) {\n                var picture1 = pictureData[index1 % pictures.length];\n                var picture2 = pictureData[index2 % pictures.length];\n                glsl.uniformTexture('u_tex1', picture1, {\n                    filtering: 'mipmap',\n                    repeat: true,\n                });\n                glsl.uniformTexture('u_tex2', picture2, {\n                    filtering: 'mipmap',\n                    repeat: true,\n                });\n                // console.log('glsl.updateTextures', 'from', from, 'to', to);\n            }\n        }\n\n        /*\n        function getNextIndex(swiper, forward) {\n            var index = getCurrentIndex(swiper);\n            index = forward ? index + 1 : index - 1;\n            index = index % pictures.length;\n            if (index < 0) {\n                index = pictures.length + index;\n            }\n            console.log('getNextIndex', index);\n            return index;\n        }\n        \n        function getPreviousIndex(swiper) {\n            var index = swiper.realIndex - (swiper.activeIndex - swiper.previousIndex);\n            return index;\n        }\n        */\n\n        function getX(swiper) {\n            return (swiper.getTranslate() / containerNode.offsetWidth * -1);\n        }\n\n        function getPow(swiper) {\n            return getX(swiper) % 1.0;\n        }\n\n    }\n\n    function getResource(url, callback) {\n        var request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.addEventListener('load', function () {\n            callback(request.responseText);\n        });\n        request.send();\n    }\n\n}());"]}