{"version":3,"sources":["docs/js/docs.js"],"names":["glsl","containerNode","document","querySelector","swiperContainerNode","pictureNodes","querySelectorAll","pictureData","pictures","Array","prototype","slice","call","map","node","index","src","getAttribute","img","Image","onload","console","log","updateTextures","swiper","Swiper","direction","pagination","navigation","nextEl","prevEl","speed","loop","preloadImages","initialSlide","on","init","canvasNode","resize","ri","url","callback","request","GlslCanvas","premultipliedAlpha","preserveDrawingBuffer","backgroundColor","w","offsetWidth","h","offsetHeight","style","width","height","onResize","clearTimeout","setTimeout","getCurrentIndex","x","getX","previousX","from","to","dir","previousDir","length","pow","previousPow","setUniforms","u_mix","forceRender","data","load","XMLHttpRequest","open","addEventListener","responseText","send","window","onresize","event","getGlslCanvas","this","loadTexture","filtering","repeat","slideNextTransitionEnd","onTransitionEnd","slidePrevTransitionEnd","progress","undefined","realIndex","activeIndex","forward","index1","index2","picture1","picture2","getTranslate","addSwiper"],"mappings":"CAEC,WACG,cAKA,WACI,IAGIA,EAHAC,EAAgBC,SAASC,cAAc,YACvCC,EAAsBH,EAAcE,cAAc,qBAClDE,EAAeD,EAAoBE,iBAAiB,OAGpDC,EAAc,GACdC,EAAWC,MAAMC,UAAUC,MAAMC,KAAKP,EAAc,GAAGQ,IAAI,SAAUC,EAAMC,GAC3E,IAAIC,EAAMF,EAAKG,aAAa,OACxBC,EAAM,IAAIC,MASd,OARAD,EAAIE,OAAS,WACTC,QAAQC,IAAI,SAAUN,GACtBT,EAAYQ,GAASG,EACjBlB,GACAuB,EAAevB,EAAKe,MAAOf,EAAKe,QAGxCG,EAAIF,IAAMA,IAGVQ,EAAS,IAAIC,OAAOrB,EAAqB,CACzCsB,UAAW,aACXC,YAAY,EACZC,WAAY,CACRC,OAAQ,sBACRC,OAAQ,uBAEZC,MAAO,IACPC,MAAM,EACNC,eAAe,EACfC,aAAc,EACdC,GAAI,CACAC,KAAM,YAEFpC,EA4BZ,SAAuBwB,GACnB,IAAIa,EAAanC,SAASC,cAAc,WACxCmC,GAAO,GACP,IAuDIC,EAqFSC,EAAKC,EAClBC,EA7II1C,EAAO,IAAI2C,WAAWN,EAAY,CAClCO,oBAAoB,EACpBC,uBAAuB,EACvBC,gBAAiB,kBA4CrB,SAASR,EAAOF,GACZ,IAAIW,EAAI9C,EAAc+C,YAClBC,EAAIhD,EAAciD,aACtBb,EAAWc,MAAMC,MAAQL,EAAI,KAC7BV,EAAWc,MAAME,OAASJ,EAAI,KAC9BZ,EAAWe,MAAQL,EACnBV,EAAWgB,OAASJ,EAIxB,SAASK,IACDf,GACAgB,aAAahB,GAEjBA,EAAKiB,WAAWlB,EAAQ,IAgB5B,OAxEAtC,EAAKe,MAAQ0C,EAAgBjC,GAC7BxB,EAAKmC,GAAG,SAAU,WACd,IAAIuB,EAAIC,EAAKnC,GAQb,GAAIoC,IAAcF,EAAG,CACjB,IAIQG,EAAMC,EAJVC,EAAW,GAALL,EACNM,IAAgBD,KAChBC,EAAcD,GAMVxC,EAFAsC,EAAO7D,EAAKe,MACZ+C,GAAM9D,EAAKe,MAAQ,GAAKP,EAASyD,SAGjCJ,EAAO7D,EAAKe,MAGZQ,EADAuC,GADAA,GAAM9D,EAAKe,MAAQ,GAAKP,EAASyD,QACvB,EAAIH,EAAKtD,EAASyD,OAASH,EAClBD,KAI3B,IAAIK,GADJN,EAAYF,GACE,EACVS,IAAgBD,IAChBC,EAAcD,EACdlE,EAAKoE,YAAY,CACbC,MAAOH,KAInBlE,EAAKsE,aAAc,IAmGV9B,EAjGD,qBAiGMC,EAjGgB,SAAU8B,GACxCvE,EAAKwE,KAAKD,KAiGd7B,EAAU,IAAI+B,gBACVC,KAAK,MAAOlC,GAAK,GACzBE,EAAQiC,iBAAiB,OAAQ,WAC7BlC,EAASC,EAAQkC,gBAErBlC,EAAQmC,OAnFJC,OAAOC,SAAW,SAAUC,GACxB1B,KAEJA,IAWOtD,EA5GQiF,CADPzD,EAAS0D,OAEJC,YAAY,SAAU,4FAA6F,CACpHC,UAAW,SACXC,QAAQ,KAGhBC,uBAAwB,WAEpBC,EADA/D,EAAS0D,OAGbM,uBAAwB,WAEpBD,EADA/D,EAAS0D,OAGbO,SAAU,WACNjE,EAAS0D,KACT7D,QAAQC,IAAI,WAAYE,EAAOiE,cAKvC7B,EAAY,EAEZI,EAAc,KACdG,EAAc,KAuFlB,SAASV,EAAgBjC,GACrB,YAA4BkE,IAArBlE,EAAOmE,UAA0BnE,EAAOmE,UAAYnE,EAAOoE,YAGtE,SAASL,EAAgB/D,EAAQqE,GACzB7F,IACAA,EAAKe,MAAQ0C,EAAgBjC,GAE7BD,EAAevB,EAAKe,MAAOf,EAAKe,QAIxC,SAASQ,EAAeuE,EAAQC,GAG5B,GAFAD,EAASA,GAAU,EAEf9F,EAAM,CACN,IAAIgG,EAAWzF,EAAYuF,EAAStF,EAASyD,QACzCgC,EAAW1F,EAAYwF,EAASvF,EAASyD,QAC7CjE,EAAKmF,YAAY,SAAUa,EAAU,CACjCZ,UAAW,SACXC,QAAQ,IAEZrF,EAAKmF,YAAY,SAAUc,EAAU,CACjCb,UAAW,SACXC,QAAQ,KAwBpB,SAAS1B,EAAKnC,GACV,OAAQA,EAAO0E,eAAiB9F,EAAoB4C,aAAe,GAS3EmD,GAjNJ","file":"docs.min.js","sourcesContent":["/* global window, document, console, GlslCanvas, Swiper */\n\n(function () {\n    'use strict';\n\n    /*--------------------------------------------------\n    Swiper\n    --------------------------------------------------*/\n    function addSwiper() {\n        var containerNode = document.querySelector('.section');\n        var swiperContainerNode = containerNode.querySelector('.swiper-container');\n        var pictureNodes = swiperContainerNode.querySelectorAll('img');\n        var glsl;\n        // console.log(pictureNodes);\n        var pictureData = [];\n        var pictures = Array.prototype.slice.call(pictureNodes, 0).map(function (node, index) {\n            var src = node.getAttribute('src');\n            var img = new Image();\n            img.onload = function () {\n                console.log('loaded', src);\n                pictureData[index] = img;\n                if (glsl) {\n                    updateTextures(glsl.index, glsl.index);\n                }\n            };\n            img.src = src;\n            return src;\n        });\n        var swiper = new Swiper(swiperContainerNode, {\n            direction: 'horizontal',\n            pagination: false, // { el: '.swiper-pagination', }\n            navigation: {\n                nextEl: '.swiper-button-next',\n                prevEl: '.swiper-button-prev'\n            },\n            speed: 750,\n            loop: false,\n            preloadImages: true,\n            initialSlide: 0,\n            on: {\n                init: function () {\n                    swiper = this;\n                    glsl = getGlslCanvas(swiper);\n                    glsl.loadTexture('u_tex0', 'https://raw.githubusercontent.com/actarian/swiper-webgl/master/docs/img/masks/mask-01.jpg', {\n                        filtering: 'mipmap',\n                        repeat: true,\n                    });\n                },\n                slideNextTransitionEnd: function () {\n                    swiper = this;\n                    onTransitionEnd(swiper, true);\n                },\n                slidePrevTransitionEnd: function () {\n                    swiper = this;\n                    onTransitionEnd(swiper, false);\n                },\n                progress: function () {\n                    swiper = this;\n                    console.log('progress', swiper.progress);\n                }\n            }\n        });\n\n        var previousX = 0,\n            previousIndex = null,\n            previousDir = null,\n            previousPow = null;\n\n        // per rimuovere il flickr serve un preload\n\n        function getGlslCanvas(swiper) {\n            var canvasNode = document.querySelector('.canvas');\n            resize(true);\n            var glsl = new GlslCanvas(canvasNode, {\n                premultipliedAlpha: false,\n                preserveDrawingBuffer: true,\n                backgroundColor: 'rgba(1,1,1,1)',\n            });\n            glsl.index = getCurrentIndex(swiper);\n            glsl.on('render', function () {\n                var x = getX(swiper);\n                /*\n                if (previousIndex !== index) {\n                    previousIndex = index;\n                    console.log('newIndex', index);\n                    updateTextures(index, index);\n                }\n                */\n                if (previousX !== x) {\n                    var dir = x >= 1; // (x - previousX) > 0;\n                    if (previousDir !== dir) {\n                        previousDir = dir;\n                        // console.log('move forward', dir, 'index', index);\n                        var from, to;\n                        if (dir) {\n                            from = glsl.index;\n                            to = (glsl.index + 1) % pictures.length;\n                            updateTextures(from, to);\n                        } else {\n                            from = glsl.index;\n                            to = (glsl.index - 1) % pictures.length;\n                            to = to < 0 ? to + pictures.length : to;\n                            updateTextures(to, from);\n                        }\n                    }\n                    previousX = x;\n                    var pow = x % 1.0;\n                    if (previousPow !== pow) {\n                        previousPow = pow;\n                        glsl.setUniforms({\n                            u_mix: pow\n                        });\n                    }\n                }\n                glsl.forceRender = true;\n            });\n            getResource(\"shaders/tween.glsl\", function (data) {\n                glsl.load(data);\n            });\n\n            function resize(init) {\n                var w = containerNode.offsetWidth;\n                var h = containerNode.offsetHeight;\n                canvasNode.style.width = w + 'px';\n                canvasNode.style.height = h + 'px';\n                canvasNode.width = w;\n                canvasNode.height = h;\n            }\n            var ri;\n\n            function onResize() {\n                if (ri) {\n                    clearTimeout(ri);\n                }\n                ri = setTimeout(resize, 50);\n            }\n            window.onresize = function (event) {\n                onResize();\n            };\n            onResize();\n            /*\n            for (var t in o.textures) {\n                glsl.uniformTexture('u_texture_' + t, o.textures[t], {\n                    filtering: 'mipmap',\n                    repeat: true,\n                });\n            }\n            gui.load(o.uniforms);\n            glsl.setUniforms(gui.uniforms());\n            */\n            return glsl;\n        }\n\n        function getCurrentIndex(swiper) {\n            return swiper.realIndex !== undefined ? swiper.realIndex : swiper.activeIndex;\n        }\n\n        function onTransitionEnd(swiper, forward) {\n            if (glsl) {\n                glsl.index = getCurrentIndex(swiper);\n                // console.log('onTransitionEnd', glsl.index);\n                updateTextures(glsl.index, glsl.index);\n            }\n        }\n\n        function updateTextures(index1, index2) {\n            index1 = index1 || 0;\n            // console.log('updateTextures', index1, index2);\n            if (glsl) {\n                var picture1 = pictureData[index1 % pictures.length];\n                var picture2 = pictureData[index2 % pictures.length];\n                glsl.loadTexture('u_tex1', picture1, {\n                    filtering: 'mipmap',\n                    repeat: true,\n                });\n                glsl.loadTexture('u_tex2', picture2, {\n                    filtering: 'mipmap',\n                    repeat: true,\n                });\n                // console.log('glsl.updateTextures', 'from', from, 'to', to);\n            }\n        }\n\n        /*\n        function getNextIndex(swiper, forward) {\n            var index = getCurrentIndex(swiper);\n            index = forward ? index + 1 : index - 1;\n            index = index % pictures.length;\n            if (index < 0) {\n                index = pictures.length + index;\n            }\n            console.log('getNextIndex', index);\n            return index;\n        }\n        \n        function getPreviousIndex(swiper) {\n            var index = swiper.realIndex - (swiper.activeIndex - swiper.previousIndex);\n            return index;\n        }\n        */\n\n        function getX(swiper) {\n            return (swiper.getTranslate() / swiperContainerNode.offsetWidth * -1);\n        }\n\n        function getPow(swiper) {\n            return getX(swiper) % 1.0;\n        }\n\n    }\n\n    addSwiper();\n\n    function getResource(url, callback) {\n        var request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.addEventListener('load', function () {\n            callback(request.responseText);\n        });\n        request.send();\n    }\n\n}());"]}